"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Request = void 0;
var _cache = require("./cache");
var _eventEmitter = _interopRequireDefault(require("./event-emitter"));
var qs = _interopRequireWildcard(require("./qs"));
var _utils = require("./utils");
var _error = require("./error");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var CONTENT_TYPE_HEADER = 'Content-Type';
var REQUEST_EVENT = 'request';
var RESPONSE_EVENT = 'response';
var ERROR_EVENT = 'error';
var DONE_EVENT = 'done';
var Request = /*#__PURE__*/function (_EventEmitter) {
  _inherits(Request, _EventEmitter);
  var _super = _createSuper(Request);
  function Request(path, method, body) {
    var _this;
    _classCallCheck(this, Request);
    _this = _super.call(this);
    _this.method = method;
    _this.path = path;
    _this.body = body;
    _this.tags = undefined;
    _this.unwrap = true;
    _this.cacheTTL = 0;
    _this.headers = {};
    _this.queryParams = {};
    _this.encoding = 'utf8';
    _this.timeout = 0;
    return _this;
  }

  /**
   * Sets a header
   *
   * @param {String|Object} key or map of headers
   * @param {String} [value]
   * @returns {Request}
   */
  _createClass(Request, [{
    key: "set",
    value: function set(key, value) {
      if ((0, _utils.isObject)(key)) {
        for (var headerName in key) {
          this.set(headerName, key[headerName]);
        }
      } else if (typeof value !== 'undefined') {
        this.headers[key] = value;
      }
      return this;
    }

    /**
     * Which kind of tags this request affects.
     * Used for cache validation.
     * Non GET requests with defined tags, will clean all related to these tags caches
     *
     * @param {Array.<String>} tags
     * @returns {Request}
     */
  }, {
    key: "cacheTags",
    value: function cacheTags() {
      for (var _len = arguments.length, tags = new Array(_len), _key = 0; _key < _len; _key++) {
        tags[_key] = arguments[_key];
      }
      this.tags = tags;
      return this;
    }

    /**
     * @param {Object} queryParams
     * @returns {Request}
     */
  }, {
    key: "query",
    value: function query(queryParams) {
      Object.assign(this.queryParams, queryParams);
      return this;
    }
  }, {
    key: "form",
    value: function form(_form) {
      var _this2 = this;
      if (_form) {
        var FormData = Request.FormData;
        if (_form instanceof FormData) {
          this.body = _form;
        } else {
          (function () {
            var formData = new FormData();
            var _loop = function _loop(formKey) {
              if (formKey) {
                (0, _utils.castArray)(_form[formKey]).forEach(function (formValue) {
                  if (formValue && formValue.hasOwnProperty('value') && formValue.hasOwnProperty('options')) {
                    formData.append(formKey, formValue.value, formValue.options);
                  } else {
                    formData.append(formKey, formValue);
                  }
                });
              }
            };
            for (var formKey in _form) {
              _loop(formKey);
            }
            _this2.body = formData;
          })();
        }
      }
      return this;
    }

    /**
     * Should we cache or use cached result
     *
     * @param {Number} ttl Time to live for cached response. 15 seconds by default
     * @returns {Request}
     */
  }, {
    key: "useCache",
    value: function useCache() {
      var ttl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 15000;
      this.cacheTTL = ttl;
      return this;
    }

    /**
     * Reset cache if passed TRUE and tags has been specified before
     *
     * @param {Boolean} reset - flag to reset cache or not
     * @returns {Request}
     */
  }, {
    key: "resetCache",
    value: function resetCache(reset) {
      if (reset && this.tags) {
        _cache.cache.deleteByTags(this.tags);
      }
      return this;
    }

    /**
     * Shortcut for req.set('Content-Type', value)
     *
     * @param {String} contentType
     * @returns {Request}
     */
  }, {
    key: "type",
    value: function type(contentType) {
      this.set(CONTENT_TYPE_HEADER, contentType);
      return this;
    }

    /**
     * Should we unwrap the response and return only body. true by default
     * @param {Boolean} unwrap
     * @returns {Request}
     */
  }, {
    key: "unwrapBody",
    value: function unwrapBody(unwrap) {
      this.unwrap = unwrap;
      return this;
    }

    /**
     * set encoding to response
     * works only for Node js
     *
     * @param {String} encoding
     * @returns {Request}
     */
  }, {
    key: "setEncoding",
    value: function setEncoding(encoding) {
      this.encoding = encoding;
      return this;
    }

    /**
     * A number specifying request timeout in milliseconds.
     * @param {Number} ms
     * @returns {Request}
     */
  }, {
    key: "setTimeout",
    value: function setTimeout(ms) {
      this.timeout = ms;
      return this;
    }

    /**
     * Sends the requst
     *
     * @param {Object} body
     * @returns {Promise}
     */
  }, {
    key: "send",
    value: function send(body) {
      var _this3 = this;
      this.emit(REQUEST_EVENT, this);
      var path = this.path;
      var queryString = qs.stringify(this.queryParams);
      if (queryString) {
        path += '?' + queryString;
      }
      if (this.cacheTTL) {
        var cached = _cache.cache.get(path);
        if (cached !== undefined) {
          return Promise.resolve(cached);
        }
      }
      var type = this.headers[CONTENT_TYPE_HEADER];
      if (!type && (0, _utils.isObject)(body) && !(0, _utils.isFormData)(body)) {
        this.type('application/json');
      }
      if (body) {
        var isJSON = this.headers[CONTENT_TYPE_HEADER] === 'application/json';
        body = isJSON && typeof body !== 'string' ? JSON.stringify(body) : body;
      }
      var unwrapBody = function unwrapBody(res) {
        return _this3.unwrap ? res.body : res;
      };

      /**
       * Caches the response if required
       */
      var cacheResponse = function cacheResponse(res) {
        if (_this3.cacheTTL) {
          _cache.cache.set(path, res, _this3.tags, _this3.cacheTTL);
        }
        return res;
      };

      /**
       * Deletes all relevant to req.cacheTags keys from the cache if this request method is not GET
       */
      var flushCache = function flushCache(res) {
        if (_this3.tags && _this3.method !== 'get') {
          _cache.cache.deleteByTags(_this3.tags);
        }
        return res;
      };
      if (Request.verbose) {
        console.log(this.method.toUpperCase(), decodeURIComponent(path), body, this.headers);
      }
      var request = Request.send(path, this.method.toUpperCase(), this.headers, body, this.encoding, this.timeout).then(parseBody).then(checkStatus).then(unwrapBody).then(cacheResponse).then(flushCache);
      request.then(function (result) {
        _this3.emit(RESPONSE_EVENT, result);
        _this3.emit(DONE_EVENT, null, result);
      })["catch"](function (error) {
        _this3.emit(ERROR_EVENT, error);
        _this3.emit(DONE_EVENT, error);
      });
      return request;
    }

    /**
     * If you are too lazy to use method 'send', don't use it and stay cool :)
     *
     * @param {Function} successHandler
     * @param {Function} errorHandler
     * @returns {Promise}
     */
  }, {
    key: "then",
    value: function then(successHandler, errorHandler) {
      this.promise = this.promise || this.send(this.body);
      return this.promise.then(successHandler, errorHandler);
    }

    /**
     * @param {Function} errorHandler
     * @returns {Promise}
     */
  }, {
    key: "catch",
    value: function _catch(errorHandler) {
      this.promise = this.promise || this.send(this.body);
      return this.promise["catch"](errorHandler);
    }
  }]);
  return Request;
}(_eventEmitter["default"]);
exports.Request = Request;
function parseBody(res) {
  try {
    return _objectSpread(_objectSpread({}, res), {}, {
      body: JSON.parse(res.body)
    });
  } catch (e) {
    return res;
  }
}

/**
 * Checks if a network request came back fine, and throws an error if not
 *
 * @param  {object} response   A response from a network request
 *
 * @return {object|undefined} Returns either the response, or throws an error
 */
function checkStatus(response) {
  if (response.status >= 200 && response.status < 300) {
    return response;
  }
  throw new _error.ResponseError(response);
}