"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isStream = exports.isObject = exports.isFormData = exports.castArray = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/**
 * Casts `value` as an array if it's not one.
 * Equvivalent to lodash/castArray
 */
var castArray = function castArray(value) {
  return Array.isArray(value) ? value : [value];
};
exports.castArray = castArray;
var isObject = function isObject(value) {
  return null != value && _typeof(value) === 'object';
};
exports.isObject = isObject;
var isFormData = function isFormData(value) {
  return value && value.constructor && value.constructor.toString().trim().indexOf('function FormData') === 0;
};
exports.isFormData = isFormData;
var isStream = function isStream(value) {
  var stream = require('stream');
  return value instanceof stream.Stream;
};
exports.isStream = isStream;