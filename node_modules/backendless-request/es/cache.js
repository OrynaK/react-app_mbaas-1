"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cache = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * @typedef {Object} CacheItem
 * @property {*} value
 * @property {Array.<RegExp|String>} tags
 * @property {Number} ttl
 */

/**
 * @param {*} value
 * @param {Array.<RegExp|String>}tags
 * @param {Number} ttl
 * @returns {CacheItem}
 */
var cacheItem = function cacheItem(value, tags, ttl) {
  return {
    value: value,
    tags: tags,
    ttl: ttl
  };
};
var currentTime = function currentTime() {
  return new Date().getTime();
};

/**
 * Returns true if tag A matches tag B :
 *  - if they are non-strictly equal
 *  - if one of them is Regexp matching the opposite
 *
 * @param {String|RegExp} a
 * @param {String|RegExp} b
 * @returns {Boolean}
 */
var tagsMatches = function tagsMatches(a, b) {
  var result = a == b; // eslint-disable-line

  if (!result && a instanceof RegExp) {
    result = a.test(b);
  }
  if (!result && b instanceof RegExp) {
    result = b.test(a);
  }
  return result;
};

/**
 * Returns true if any of A tags matches any of B tags
 *
 * @param {Array.<String|RegExp>} a
 * @param {Array.<String|RegExp>} b
 * @returns {Boolean}
 */
var tagsContainMatches = function tagsContainMatches(a, b) {
  return !!a.find(function (aTag) {
    return b.find(function (bTag) {
      return tagsMatches(aTag, bTag);
    });
  });
};

/**
 * A Cache with TTL and optional tags for the keys
 * Makes it possible to assign multiple tags for a key and delete keys by tags
 * Optionally it starts flushing timer which cleans all outdated keys
 */
var Cache = /*#__PURE__*/function () {
  /**
   * @param {Number?} flushInterval
   */
  function Cache(flushInterval) {
    _classCallCheck(this, Cache);
    this.setFlushInterval(flushInterval);

    /**
     * @type {Map.<String, CacheItem>}
     */
    this.map = new Map();
  }
  _createClass(Cache, [{
    key: "setFlushInterval",
    value: function setFlushInterval(flushInterval) {
      this.flushInterval = flushInterval;
      if (this.flushTimer) {
        clearInterval(this.flushTimer);
        delete this.flushTimer;
      }
    }

    /**
     * @param {String} key
     * @returns {*}
     */
  }, {
    key: "get",
    value: function get(key) {
      var cacheItem = this.map.get(key);
      if (cacheItem) {
        if (cacheItem.ttl > currentTime()) {
          return cacheItem.value;
        } else {
          this.map["delete"](key);
        }
      }
    }

    /**
     * @param {String} key
     * @param {*} value
     * @param {Array.<RegExp|String>=} tags
     * @param {Number=} ttl
     */
  }, {
    key: "set",
    value: function set(key, value, tags, ttl) {
      this.map.set(key, cacheItem(value, tags, currentTime() + ttl));
      if (this.flushInterval && !this.flushTimer) {
        this.flushTimer = setInterval(this.flush.bind(this), this.flushInterval);
        if (this.flushTimer.unref) {
          this.flushTimer.unref();
        }
      }
    }

    /**
     * @param {String} key
     */
  }, {
    key: "delete",
    value: function _delete(key) {
      this.map["delete"](key);
    }
  }, {
    key: "deleteAll",
    value: function deleteAll() {
      var _iterator = _createForOfIteratorHelper(this.map),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 1),
            key = _step$value[0];
          this["delete"](key);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    /**
     * @param {Array.<String>} tags
     */
  }, {
    key: "deleteByTags",
    value: function deleteByTags(tags) {
      var _iterator2 = _createForOfIteratorHelper(this.map),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _step2$value = _slicedToArray(_step2.value, 2),
            key = _step2$value[0],
            value = _step2$value[1];
          if (value.tags && tagsContainMatches(tags, value.tags)) {
            this["delete"](key);
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }

    /**
     * Deletes all outdated keys
     */
  }, {
    key: "flush",
    value: function flush() {
      var now = currentTime();
      var _iterator3 = _createForOfIteratorHelper(this.map),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _step3$value = _slicedToArray(_step3.value, 2),
            key = _step3$value[0],
            value = _step3$value[1];
          if (value.ttl < now) {
            this["delete"](key);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }]);
  return Cache;
}();
var CACHE_FLUSH_INTERVAL = 60000; //60 sec

var cache = exports.cache = new Cache(CACHE_FLUSH_INTERVAL);