"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.castArray = void 0;
exports.getFormData = getFormData;
exports.isStream = exports.isObject = exports.isNodeJS = exports.isFormData = exports.isBrowser = void 0;
exports.setFormData = setFormData;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
/**
 * Casts `value` as an array if it's not one.
 * Equvivalent to lodash/castArray
 */
var castArray = exports.castArray = function castArray(value) {
  return Array.isArray(value) ? value : [value];
};
var isObject = exports.isObject = function isObject(value) {
  return null != value && _typeof(value) === 'object';
};
var isFormData = exports.isFormData = function isFormData(value) {
  if (!value) {
    return false;
  }
  var FormData = getFormData();
  if (value instanceof FormData) {
    return true;
  }
  return value && value.constructor && value.constructor.toString().trim().indexOf('function FormData') === 0;
};
var isStream = exports.isStream = function isStream(value) {
  var stream = require('stream');
  return value instanceof stream.Stream;
};
var isNodeJS = exports.isNodeJS = function isNodeJS() {
  return typeof process !== 'undefined' && process.versions != null && process.versions.node != null;
};
var isBrowser = exports.isBrowser = function isBrowser() {
  return typeof window !== 'undefined' && typeof window.document !== 'undefined';
};
var CustomFormData = null;
function getFormData() {
  if (CustomFormData) {
    return CustomFormData;
  }
  return isNodeJS() || typeof FormData === 'undefined' ? require('form-data') : FormData;
}
function setFormData(value) {
  CustomFormData = value;
}